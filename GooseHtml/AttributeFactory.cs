using GooseHtml.Attributes;

namespace GooseHtml;

internal static class AttributeFactory
{
	internal static Attributes.Attribute Create(string key, string value)
	{
		return key.ToLower() switch
		{
			"accept" => new Accept(value),
				"acceptcharset" => new AcceptCharset(value),
				"accesskey" => new AccessKey(value),
				"action" => new Attributes.Action(value),
				"allow" => new Allow(value),
				"alt" => new Alt(value),
				"as" => new As(value),
				"asyncattribute" => new AsyncAttribute(value),
				"attribute" => new Attributes.Attribute("attribute",value),
				"autocapitalize" => new Autocapitalize(value),
				"autocomplete" => new Autocomplete(value),
				"autoplay" => new Autoplay(value),
				"capture" => new Capture(value),
				"charset" => new Charset(value),
				"cite" => new Attributes.Cite(value),
				"class" => new Attributes.Class(value),
				"cols" => new Cols(value),
				"colspan" => new Colspan(value),
				"content" => new Content(value),
				"contenteditable" => new Contenteditable(value),
				"controls" => new Controls(value),
				"coords" => new Coords(value),
				"crossorigin" => new CrossOrigin(value),
				"csp" => new Csp(value),
				"d" => new D(value),
				"data" => new Attributes.Data(value),
				"datetime" => new Datetime(value),
				"decoding" => new Decoding(value),
				"default" => new Default(value),
				"deferattribute" => new DeferAttribute(value),
				"dir" => new Dir(value),
				"dirname" => new Dirname(value),
				"disabled" => new Disabled(value),
				"download" => new Download(value),
				"draggable" => new Draggable(value),
				"enctype" => new Enctype(value),
				"enterkeyhint" => new Enterkeyhint(value),
				"fill" => new Fill(value),
				"for" => new For(value),
				"form" => new Attributes.Form(value),
				"formaction" => new Formaction(value),
				"formenctype" => new Formenctype(value),
				"formmethod" => new Formmethod(value),
				"formnovalidate" => new FormnoValidate(value),
				"formtarget" => new Formtarget(value),
				"headers" => new Headers(value),
				"hidden" => new Hidden(value),
				"high" => new High(value),
				"href" => new Href(value),
				"hreflang" => new Hreflang(value),
				"httpequiv" => new HttpEquiv(value),
				"id" => new Id(value),
				"inputmode" => new Inputmode(value),
				"integrity" => new Integrity(value),
				"ismap" => new Ismap(value),
				"itemprop" => new Itemprop(value),
				"kind" => new Kind(value),
				"label" => new Attributes.Label(value),
				"lang" => new Lang(value),
				"language" => new Language(value),
				"list" => new List(value),
				"loading" => new Loading(value),
				"loop" => new Loop(value),
				"low" => new Low(value),
				"max" => new Max(value),
				"maxlength" => new Maxlength(value),
				"media" => new Media(value),
				"method" => new Method(value),
				"min" => new Min(value),
				"minlength" => new Minlength(value),
				"multiple" => new Multiple(value),
				"muted" => new Muted(value),
				"name" => new Name(value),
				"novalidate" => new NoValidate(value),
				"open" => new Open(value),
				"optimum" => new Optimum(value),
				"pattern" => new Pattern(value),
				"ping" => new Ping(value),
				"placeholder" => new Placeholder(value),
				"playsinline" => new Playsinline(value),
				"poster" => new Poster(value),
				"preload" => new Preload(value),
				"referrerpolicy" => new ReferrerPolicy(value),
				"rel" => new Rel(value),
				"required" => new Required(value),
				"reversed" => new ReVersed(value),
				"role" => new Role(value),
				"rows" => new Rows(value),
				"rowspan" => new Rowspan(value),
				"sandbox" => new Sandbox(value),
				"scope" => new Scope(value),
				"scoped" => new Scoped(value),
				"selected" => new Selected(value),
				"shape" => new Shape(value),
				"size" => new Size(value),
				"sizes" => new Sizes(value),
				"slot" => new Slot(value),
				"span" => new Attributes.Span(value),
				"spellcheck" => new Spellcheck(value),
				"src" => new Src(value),
				"srcdoc" => new Srcdoc(value),
				"srclang" => new Srclang(value),
				"srcset" => new Srcset(value),
				"start" => new Start(value),
				"step" => new Step(value),
				"style" => new Attributes.Style(value),
				"summary" => new Attributes.Summary(value),
				"tabindex" => new Tabindex(value),
				"target" => new Target(value),
				"titleattribute" => new TitleAttribute(value),
				"translate" => new Translate(value),
				"type" => new Attributes.Type(value),
				"usemap" => new Usemap(value),
				"value" => new Value(value),
				"wrap" => new Wrap(value),

				_ => throw new ArgumentException($"Attribute {key} unknown"),
		};
	}
}


