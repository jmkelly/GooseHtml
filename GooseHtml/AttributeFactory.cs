using GooseHtml.Attributes;

namespace GooseHtml;

internal static class AttributeFactory
{
	internal static Attributes.Attribute Create(string key, string value)
	{
		return key.ToLower() switch
		{
			"accept" => new Accept(value),
				"acceptcharset" => new AcceptCharset(value),
				"accesskey" => new AccessKey(value),
				"action" => new Attributes.Action(value),
				"allow" => new Allow(value),
				"alt" => new Alt(value),
				"as" => new As(value),
				"asyncattribute" => new AsyncAttribute(value),
				"attribute" => new Attributes.Attribute("attribute",value),
				"autocapitalize" => new Autocapitalize(value),
				"autocomplete" => new Autocomplete(value),
				"autoplay" => new Autoplay(value),
				"capture" => new Capture(value),
				"charset" => new Charset(value),
				"cite" => new Attributes.Cite(value),
				"class" => new Attributes.Class(value),
				"cols" => new Cols(value),
				"colspan" => new Colspan(value),
				"content" => new Content(value),
				"contenteditable" => new Contenteditable(value),
				"controls" => new Controls(value),
				"coords" => new Coords(value),
				"crossorigin" => new CrossOrigin(value),
				"csp" => new Csp(value),
				"d" => new D(value),
				"data" => new Attributes.Data(value),
				"datetime" => new Datetime(value),
				"decoding" => new Decoding(value),
				"default" => new Default(value),
				"deferattribute" => new DeferAttribute(value),
				"dir" => new Dir(value),
				"dirname" => new Dirname(value),
				"disabled" => new Disabled(value),
				"download" => new Download(value),
				"draggable" => new Draggable(value),
				"enctype" => new Enctype(value),
				"enterkeyhint" => new Enterkeyhint(value),
				"fill" => new Fill(value),
				"for" => new For(value),
				"form" => new Attributes.Form(value),
				"formaction" => new Formaction(value),
				"formenctype" => new Formenctype(value),
				"formmethod" => new Formmethod(value),
				"formnovalidate" => new FormnoValidate(value),
				"formtarget" => new Formtarget(value),
				"headers" => new Headers(value),
				"hidden" => new Hidden(value),
				"height" => new Height(value),
				"high" => new High(value),
				"href" => new Href(value),
				"hreflang" => new Hreflang(value),
				"httpequiv" => new HttpEquiv(value),
				"id" => new Id(value),
				"inputmode" => new Inputmode(value),
				"integrity" => new Integrity(value),
				"ismap" => new Ismap(value),
				"itemprop" => new Itemprop(value),
				"kind" => new Kind(value),
				"label" => new Attributes.Label(value),
				"lang" => new Lang(value),
				"language" => new Language(value),
				"list" => new List(value),
				"loading" => new Loading(value),
				"loop" => new Loop(value),
				"low" => new Low(value),
				"max" => new Max(value),
				"maxlength" => new Maxlength(value),
				"media" => new Media(value),
				"method" => new Method(value),
				"min" => new Min(value),
				"minlength" => new Minlength(value),
				"multiple" => new Multiple(value),
				"muted" => new Muted(value),
				"name" => new Name(value),
				"novalidate" => new NoValidate(value),
				"open" => new Open(value),
				"optimum" => new Optimum(value),
				"pattern" => new Pattern(value),
				"ping" => new Ping(value),
				"placeholder" => new Placeholder(value),
				"playsinline" => new Playsinline(value),
				"poster" => new Poster(value),
				"preload" => new Preload(value),
				"referrerpolicy" => new ReferrerPolicy(value),
				"rel" => new Rel(value),
				"required" => new Required(value),
				"reversed" => new ReVersed(value),
				"role" => new Role(value),
				"rows" => new Rows(value),
				"rowspan" => new Rowspan(value),
				"sandbox" => new Sandbox(value),
				"scope" => new Scope(value),
				"scoped" => new Scoped(value),
				"selected" => new Selected(value),
				"shape" => new Shape(value),
				"size" => new Size(value),
				"sizes" => new Sizes(value),
				"slot" => new Slot(value),
				"span" => new Attributes.Span(value),
				"spellcheck" => new Spellcheck(value),
				"src" => new Src(value),
				"srcdoc" => new Srcdoc(value),
				"srclang" => new Srclang(value),
				"srcset" => new Srcset(value),
				"start" => new Start(value),
				"step" => new Step(value),
				"style" => new Attributes.Style(value),
				"summary" => new Attributes.Summary(value),
				"tabindex" => new Tabindex(value),
				"target" => new Target(value),
				"titleattribute" => new TitleAttribute(value),
				"translate" => new Translate(value),
				"type" => new Attributes.Type(value),
				"usemap" => new Usemap(value),
				"value" => new Value(value),
				"viewbox" => new ViewBox(value),
				"width" => new Width(value),
				"wrap" => new Wrap(value),
				"xmlns" => new Xmlns(value),
				"acceptCharset" => new AcceptCharset(value),
				"accessKey" => new AccessKey(value),
				"accumulate" => new Accumulate(value),
				"additive" => new Additive(value),
				"alignmentBaseline" => new AlignmentBaseline(value),
				"amplitude" => new Amplitude(value),
				"asyncAttribute" => new AsyncAttribute(value),
				"azimuth" => new Azimuth(value),
				"baseFrequency" => new BaseFrequency(value),
				"baselineShift" => new BaselineShift(value),
				"begin" => new Begin(value),
				"bias" => new Bias(value),
				"by" => new By(value),
				"calcMode" => new CalcMode(value),
				"clipPath" => new ClipPath(value),
				"clipPathUnits" => new ClipPathUnits(value),
				"clipRule" => new ClipRule(value),
				"color" => new Color(value),
				"color-interpolation" => new ColorInterpolation(value),
				"color-interpolation-filters" => new ColorInterpolationFilters(value),
				"cursor" => new Cursor(value),
				"cx" => new Cx(value),
				"cy" => new Cy(value),
				"defer" => new DeferAttribute(value),
				"diffuseConstant" => new DiffuseConstant(value),
				"direction" => new Direction(value),
				"display" => new Display(value),
				"divisor" => new Divisor(value),
				"dominant-baseline" => new DominantBaseline(value),
				"dur" => new Dur(value),
				"dx" => new Dx(value),
				"dy" => new Dy(value),
				"edgeMode" => new EdgeMode(value),
				"elevation" => new Elevation(value),
				"end" => new End(value),
				"exponent" => new Exponent(value),
				"fill-opacity" => new FillOpacity(value),
				"fill-rule" => new FillRule(value),
				"filter" => new Attributes.Filter(value),
				"filterUnits" => new FilterUnits(value),
				"flood-color" => new FloodColor(value),
				"flood-opacity" => new FloodOpacity(value),
				"font-family" => new FontFamily(value),
				"font-size" => new FontSize(value),
				"font-size-adjust" => new FontSizeAdjust(value),
				"font-style" => new FontStyle(value),
				"font-variant" => new FontVariant(value),
				"font-weight" => new FontWeight(value),
				"fr" => new Fr(value),
				"from" => new From(value),
				"fx" => new Fx(value),
				"fy" => new Fy(value),
				"gradienttransform" => new GradientTransform(value),
				"gradientunits" => new GradientUnits(value),
				"http-equiv" => new HttpEquiv(value),
				"image-rendering" => new ImageRendering(value),
				"in" => new In(value),
				"in2" => new In2(value),
				"intercept" => new Intercept(value),
				"k1" => new K1(value),
				"k2" => new K2(value),
				"k3" => new K3(value),
				"k4" => new K4(value),
				"kernelmatrix" => new KernelMatrix(value),
				"kernelunitlength" => new KernelUnitLength(value),
				"keypoints" => new KeyPoints(value),
				"keysplines" => new KeySplines(value),
				"keytimes" => new KeyTimes(value),
				"lengthadjust" => new LengthAdjust(value),
				"letter-spacing" => new LetterSpacing(value),
				"lighting-color" => new LightingColor(value),
				"limitingconeangle" => new LimitingConeAngle(value),
				"marker-end" => new MarkerEnd(value),
				"markerheight" => new MarkerHeight(value),
				"markermid" => new MarkerMid(value),
				"marker-start" => new MarkerStart(value),
				"markerunits" => new MarkerUnits(value),
				"markerwidth" => new MarkerWidth(value),
				"mask" => new Mask(value),
				"maskcontentunits" => new MaskContentUnits(value),
				"maskunits" => new MaskUnits(value),
				"numoctaves" => new NumOctaves(value),
				"opacity" => new Opacity(value),
				"operator" => new Operator(value),
				"order" => new Order(value),
				"orient" => new Orient(value),
				"overflow" => new Overflow(value),
				"overline-position" => new OverlinePosition(value),
				"overline-thickness" => new OverlineThickness(value),
				"paintOrder" => new PaintOrder(value),
				"path" => new Attributes.Path(value),
				"pathlength" => new PathLength(value),
				"patterncontentunits" => new PatternContentUnits(value),
				"patterntransform" => new PatternTransform(value),
				"patternunits" => new PatternUnits(value),
				"pointer-events" => new PointerEvents(value),
				"points" => new Points(value),
				"pointsatx" => new PointsAtX(value),
				"pointsaty" => new PointsAtY(value),
				"pointsatz" => new PointsAtZ(value),
				"preservealpha" => new PreserveAlpha(value),
				"preserveaspectratio" => new PreserveAspectRatio(value),
				"primitiveunits" => new PrimitiveUnits(value),
				"property" => new Property(value),
				"r" => new R(value),
				"radius" => new Radius(value),
				"refX" => new RefX(value),
				"refY" => new RefY(value),
				"repeatcount" => new RepeatCount(value),
				"repeatdur" => new RepeatDur(value),
				"restart" => new Restart(value),
				"result" => new Result(value),
				"rotate" => new Rotate(value),
				"rx" => new Rx(value),
				"ry" => new Ry(value),
				"scale" => new Scale(value),
				"seed" => new Seed(value),
				"shape-rendering" => new ShapeRendering(value),
				"side" => new Side(value),
				"spacing" => new Spacing(value),
				"specularconstant" => new SpecularConstant(value),
				"specularexponent" => new SpecularExponent(value),
				"spreadmethod" => new SpreadMethod(value),
				"startoffset" => new StartOffset(value),
				"stddeviation" => new StdDeviation(value),
				"stitchtiles" => new StitchTiles(value),
				"stop-color" => new StopColor(value),
				"stop-opacity" => new StopOpacity(value),
				"strikethrough-position" => new StrikethroughPosition(value),
				"strikethrough-thickness" => new StrikethroughThickness(value),
				"stroke" => new Stroke(value),
				"stroke-linecap" => new StrokeLinecap(value),
				"stroke-linejoin" => new StrokeLinejoin(value),
				"stroke-miter-limit" => new StrokeMiterlimit(value),
				"stroke-opacity" => new StrokeOpacity(value),
				"stroke-width" => new StrokeWidth(value),
				"stroke-dash-array" => new Strokedasharray(value),
				"stroke-dash-offset" => new Strokedashoffset(value),
				"surfacescale" => new SurfaceScale(value),
				"systemlanguage" => new SystemLanguage(value),
				"tablevalues" => new TableValues(value),
				"targetx" => new TargetX(value),
				"targety" => new TargetY(value),
				"text-anchor" => new TextAnchor(value),
				"text-decoration" => new TextDecoration(value),
				"text-rendering" => new TextRendering(value),
				"title" => new TitleAttribute(value),
				"to" => new To(value),
				"transform" => new Transform(value),
				"transform-origin" => new TransformOrigin(value),
				"underline-position" => new UnderlinePosition(value),
				"underline-thickness" => new UnderlineThickness(value),
				"unicode-bidi" => new UnicodeBidi(value),
				"values" => new Values(value),
				"vector-effect" => new VectorEffect(value),
				"visibility" => new Visibility(value),
				"wordspacing" => new WordSpacing(value),
				"writing-mode" => new WritingMode(value),
				"x1" => new X1(value),
				"x2" => new X2(value),
				"xchannelselector" => new XChannelSelector(value),
				"y" => new Y(value),
				"y1" => new Y1(value),
				"y2" => new Y2(value),
				"ychannelselector" => new YChannelSelector(value),
				"z" => new Z(value),
				"zoomandplan" => new ZoomAndPlan(value),
				_ => throw new ArgumentException($"Attribute {key} unknown"),
		};
	}
}

public class Property : PrimitiveUnits
{
    public Property(string Value) : base(Value)
    {
    }
}
